/* grammar for the language
 * written in the way it is parsed
 * but not including names for all productions
 */

program ::= (struct | function)*

struct ::= 'struct' identifier '{' (vardecl ';')* '}'

function ::= vardecl '(' (vardecl (',' vardecl)*)? ')' statement

/* vardecl and fcall are just common stuff refactored out /*
vardecl ::= identifier ('*')* identifier

/* fcall is incomplete, needs an identifier before it */
fcall ::= '(' (expression (',' expression)*)? ')'

block ::= '{' statement* '}'

if ::= 'if' condition statement ('else' statement)?

while ::= 'while' condition statement

statement ::= block | if | while | 'break' ';' | 'continue' ';' | 'return' expression ';' | vardecl ('=' expression)? ';' | '*' factor '=' expression ';' | identifier struct_access? '=' expression ';' | identifier fcall ';'

condition ::= expression ('==' | '!=' | '>' | '<' | '>=' | '<=') expression

expression ::= mult (('+' | '-') mult)*

mult ::= shift (('*' | '/') shift)*

shift ::= bitwise (('<<' | '>>' | '>>>') bitwise)*

bitwise ::= unary (('&' | '|' | '^') unary)*

unary ::= ('-' | '~' | '*' | '&' | 'sizeof')* factor

factor ::= '(' expression ')' | integer | string |
	identifier fcall | identifier struct_access

# another factored out incomplete thing
struct_access ::= ('.' identifier)*

